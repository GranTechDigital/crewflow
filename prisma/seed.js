import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

async function main() {
  // Primeiro, criar os centros de custo
  const centrosCusto = [
    {
      num_centro_custo: '6.21.01',
      nome_centro_custo: 'Centro de Custo UN-BC-LOTE 2',
      status: 'Ativo',
    },
    {
      num_centro_custo: '6.21.02',
      nome_centro_custo: 'Centro de Custo Descomissionamento',
      status: 'Ativo',
    },
    {
      num_centro_custo: '6.21.03',
      nome_centro_custo: 'Centro de Custo PERENCO',
      status: 'Ativo',
    },
    {
      num_centro_custo: '6.24.01',
      nome_centro_custo: 'Centro de Custo UN-BS-O&M',
      status: 'Ativo',
    },
    {
      num_centro_custo: '6.24.02',
      nome_centro_custo: 'Centro de Custo UN-BS UMS/PAR',
      status: 'Ativo',
    },
    {
      num_centro_custo: '6.25.01',
      nome_centro_custo: 'Centro de Custo TVD UN-BC',
      status: 'Ativo',
    },
  ]

  console.log('Criando centros de custo...')
  const centrosCustoCriados = []
  for (const centroCusto of centrosCusto) {
    const created = await prisma.centroCusto.upsert({
      where: { num_centro_custo: centroCusto.num_centro_custo },
      update: {},
      create: centroCusto,
    })
    centrosCustoCriados.push(created)
    console.log(`Centro de custo criado: ${created.num_centro_custo} - ${created.nome_centro_custo}`)
  }

  // Depois, criar os contratos (sem centro de custo)
  const contratos = [
    {
      nome: 'UN-BC-LOTE 2',
      numero: '4600677360',
      cliente: 'Petrobras',
      dataInicio: new Date('2025-01-01'),
      dataFim: new Date('2025-12-01'),
      status: 'Ativo',
    },
    {
      nome: 'DESCOMISSIONAMENTO NO A√áU',
      numero: '4600677361',
      cliente: 'Petrobras',
      dataInicio: new Date('2025-01-01'),
      dataFim: new Date('2025-12-01'),
      status: 'Ativo',
    },
    {
      nome: 'PERENCO - PCH-1 & PCH-2',
      numero: '4600677362',
      cliente: 'Petrobras',
      dataInicio: new Date('2025-01-01'),
      dataFim: new Date('2025-12-01'),
      status: 'Ativo',
    },
    {
      nome: 'UN-BS-O&M SANTOS',
      numero: '4600679351',
      cliente: 'Petrobras',
      dataInicio: new Date('2025-01-01'),
      dataFim: new Date('2025-12-01'),
      status: 'Ativo',
    },
    {
      nome: 'UN-BS | UMS/PAR',
      numero: '4600679352',
      cliente: 'Petrobras',
      dataInicio: new Date('2025-01-01'),
      dataFim: new Date('2025-12-01'),
      status: 'Ativo',
    },
    {
      nome: 'TVD | UN-BC-LOTE 1',
      numero: '4600680673',
      cliente: 'Petrobras',
      dataInicio: new Date('2025-01-01'),
      dataFim: new Date('2025-12-01'),
      status: 'Ativo',
    },
  ]

  console.log('Criando contratos...')
  const contratosCriados = []
  for (const contrato of contratos) {
    const created = await prisma.contrato.upsert({
      where: { numero: contrato.numero },
      update: {},
      create: contrato,
    })
    contratosCriados.push(created)
    console.log(`Contrato criado: ${created.numero} - ${created.nome}`)
  }

  // Por fim, criar as vincula√ß√µes entre contratos e centros de custo
  const vinculacoes = [
    { contratoId: contratosCriados[0].id, centroCustoId: centrosCustoCriados[0].id }, // UN-BC-LOTE 2 -> 6.21.01
    { contratoId: contratosCriados[1].id, centroCustoId: centrosCustoCriados[1].id }, // DESCOMISSIONAMENTO -> 6.21.02
    { contratoId: contratosCriados[2].id, centroCustoId: centrosCustoCriados[2].id }, // PERENCO -> 6.21.03
    { contratoId: contratosCriados[3].id, centroCustoId: centrosCustoCriados[3].id }, // UN-BS-O&M -> 6.24.01
    { contratoId: contratosCriados[4].id, centroCustoId: centrosCustoCriados[4].id }, // UN-BS UMS/PAR -> 6.24.02
    { contratoId: contratosCriados[5].id, centroCustoId: centrosCustoCriados[5].id }, // TVD -> 6.25.01
  ]

  console.log('Criando vincula√ß√µes...')
  for (const vinculacao of vinculacoes) {
    await prisma.contratosCentrosCusto.upsert({
      where: {
        contratoId_centroCustoId: {
          contratoId: vinculacao.contratoId,
          centroCustoId: vinculacao.centroCustoId,
        },
      },
      update: {},
      create: vinculacao,
    })
    console.log(`Vincula√ß√£o criada: Contrato ${vinculacao.contratoId} <-> Centro de Custo ${vinculacao.centroCustoId}`)
  }

  // Criar equipes padr√£o
  const equipes = [
    {
      nome: 'RH',
      descricao: 'Recursos Humanos - Gest√£o de pessoal e processos administrativos'
    },
    {
      nome: 'Treinamento',
      descricao: 'Capacita√ß√£o e desenvolvimento de funcion√°rios'
    },
    {
      nome: 'Medicina',
      descricao: 'Medicina do trabalho e sa√∫de ocupacional'
    },
    {
      nome: 'Log√≠stica',
      descricao: 'Gest√£o log√≠stica e operacional'
    },
    {
      nome: 'Planejamento',
      descricao: 'Planejamento estrat√©gico e gest√£o de contratos'
    },
    {
      nome: 'Administra√ß√£o',
      descricao: 'Administra√ß√£o geral do sistema'
    }
  ]

  console.log('üìã Criando equipes...')
  const equipesCriadas = []
  for (const equipeData of equipes) {
    const equipe = await prisma.equipe.upsert({
      where: { nome: equipeData.nome },
      update: {},
      create: equipeData
    })
    equipesCriadas.push(equipe)
    console.log(`‚úÖ Equipe "${equipe.nome}" criada`)
  }

  // Criar funcion√°rio administrador
  console.log('üë§ Criando funcion√°rio administrador...')
  const adminFuncionario = await prisma.funcionario.upsert({
    where: { matricula: 'ADMIN001' },
    update: {},
    create: {
      matricula: 'ADMIN001',
      nome: 'Administrador do Sistema',
      email: 'admin@gransystem.com',
      funcao: 'Administrador',
      departamento: 'TI',
      status: 'ATIVO'
    }
  })
  console.log('‚úÖ Funcion√°rio administrador criado')



  // Criar usu√°rio administrador
  console.log('üîê Criando usu√°rio administrador...')
  const equipeAdmin = equipesCriadas.find(e => e.nome === 'Administra√ß√£o')
  
  if (equipeAdmin) {
    const senhaHash = await bcrypt.hash('admin123', 12)
    
    await prisma.usuario.upsert({
      where: { funcionarioId: adminFuncionario.id },
      update: {},
      create: {
        funcionarioId: adminFuncionario.id,
        senha: senhaHash,
        equipeId: equipeAdmin.id
      }
    })
    console.log('‚úÖ Usu√°rio administrador criado')
    console.log('üìù Credenciais do administrador:')
    console.log('   Matr√≠cula: ADMIN001')
    console.log('   Senha: admin123')
    console.log('   ‚ö†Ô∏è  IMPORTANTE: Altere a senha ap√≥s o primeiro login!')
  }

  // Criar tarefas padr√£o
  const tarefasPadrao = [
    // RH
    { setor: 'RH', tipo: 'RG', descricao: 'Verificar e validar documento de identidade (RG)' },
    { setor: 'RH', tipo: 'CPF', descricao: 'Verificar e validar CPF do funcion√°rio' },
    { setor: 'RH', tipo: 'CTPS (ADMISS√ÉO E PROMO√á√ÉO)', descricao: 'Processar Carteira de Trabalho para admiss√£o e promo√ß√£o' },
    { setor: 'RH', tipo: 'ESCOLARIDADE', descricao: 'Verificar e validar comprovantes de escolaridade' },
    { setor: 'RH', tipo: 'COMPROVANTE DE RESID√äNCIA', descricao: 'Verificar e validar comprovante de resid√™ncia atualizado' },
    { setor: 'RH', tipo: 'PIS', descricao: 'Verificar e processar PIS do funcion√°rio' },
    { setor: 'RH', tipo: 'COMPROVANTE DE QUITA√á√ÉO DE ANUIDADE (CREA OU CFT)', descricao: 'Verificar quita√ß√£o de anuidade do conselho profissional' },
    { setor: 'RH', tipo: 'CERTIFICADO DE FUN√á√ÉO (ADMISS√ÉO E PROMO√á√ÉO)', descricao: 'Processar certificado de fun√ß√£o para admiss√£o e promo√ß√£o' },
    
    // MEDICINA
    { setor: 'MEDICINA', tipo: 'ASO', descricao: 'Realizar Atestado de Sa√∫de Ocupacional (ASO)' },
    
    // TREINAMENTO
    { setor: 'TREINAMENTO', tipo: 'REGRAS DE OURO', descricao: 'Treinamento sobre Regras de Ouro' },
    { setor: 'TREINAMENTO', tipo: 'CUIDADO COM AS M√ÉOS', descricao: 'Treinamento de Cuidado com as M√£os' },
    { setor: 'TREINAMENTO', tipo: 'INTEGRA√á√ÉO DE SMS', descricao: 'Integra√ß√£o de Sistema de Gest√£o de SMS' },
    { setor: 'TREINAMENTO', tipo: 'CBSP - SALVATAGEM', descricao: 'Curso B√°sico de Seguran√ßa de Plataforma - Salvatagem' },
    { setor: 'TREINAMENTO', tipo: 'T-HUET', descricao: 'Treinamento de Escape Subaqu√°tico de Helic√≥ptero' },
    { setor: 'TREINAMENTO', tipo: 'CESS - CURSO DE EMBARCA√á√ïES DE SOBREVIVENCIA E SALVAMENTO', descricao: 'Curso de Embarca√ß√µes de Sobreviv√™ncia e Salvamento' },
    { setor: 'TREINAMENTO', tipo: 'CERR - C de Embarc.R√°pidas de Resgate', descricao: 'Curso de Embarca√ß√µes R√°pidas de Resgate' },
    { setor: 'TREINAMENTO', tipo: 'CACI - CURSO AVAN√áADO DE COMBATE A INCENDIO', descricao: 'Curso Avan√ßado de Combate a Inc√™ndio' },
    { setor: 'TREINAMENTO', tipo: 'NR-10 - ELETRICIDADE', descricao: 'NR-10 - Seguran√ßa em Instala√ß√µes e Servi√ßos em Eletricidade' },
    { setor: 'TREINAMENTO', tipo: 'NR-10 - ATM. EXPLOSIVA', descricao: 'NR-10 - Atmosfera Explosiva' },
    { setor: 'TREINAMENTO', tipo: 'NR-12 - MAQUINAS E EQUIPAMENTOS', descricao: 'NR-12 - Seguran√ßa no Trabalho em M√°quinas e Equipamentos' },
    { setor: 'TREINAMENTO', tipo: 'NR-33 - ESPA√áO CONFINADO', descricao: 'NR-33 - Seguran√ßa e Sa√∫de nos Trabalhos em Espa√ßos Confinados' },
    { setor: 'TREINAMENTO', tipo: 'NR-33 EMERGENCIA E RESGATE - L√çDER', descricao: 'NR-33 Emerg√™ncia e Resgate - L√≠der' },
    { setor: 'TREINAMENTO', tipo: 'NR-33 EMERGENCIA E RESGATE - OPERACIONAL', descricao: 'NR-33 Emerg√™ncia e Resgate - Operacional' },
    { setor: 'TREINAMENTO', tipo: 'NR-34 - ADMISSIONAL', descricao: 'NR-34 - Condi√ß√µes e Meio Ambiente de Trabalho na Ind√∫stria da Constru√ß√£o e Repara√ß√£o Naval - Admissional' },
    { setor: 'TREINAMENTO', tipo: 'NR-34 - OBSERVADOR DE TRABALHO √Ä QUENTE', descricao: 'NR-34 - Observador de Trabalho √† Quente' },
    { setor: 'TREINAMENTO', tipo: 'NR-34 - CURSO B√ÅSICO PARA TRABALHOS √Ä QUENTE', descricao: 'NR-34 - Curso B√°sico para Trabalhos √† Quente' },
    { setor: 'TREINAMENTO', tipo: 'NR-34 - CURSO B√ÅSICO DE SEGURAN√áA EM TESTE DE ESTANQUEIDADE', descricao: 'NR-34 - Curso B√°sico de Seguran√ßa em Teste de Estanqueidade' },
    { setor: 'TREINAMENTO', tipo: 'NR-34.11 - CERTIFICADO TREINAMENTO PARA MONTAGEM DE ANDAIMES', descricao: 'NR-34.11 - Certificado Treinamento para Montagem de Andaimes' },
    { setor: 'TREINAMENTO', tipo: 'NR-35 - TRABALHO EM ALTURA', descricao: 'NR-35 - Trabalho em Altura' },
    { setor: 'TREINAMENTO', tipo: 'NR-37 - B√ÅSICO', descricao: 'NR-37 - Seguran√ßa e Sa√∫de em Plataformas de Petr√≥leo - B√°sico' },
    { setor: 'TREINAMENTO', tipo: 'NR-37 - AVAN√áADO', descricao: 'NR-37 - Seguran√ßa e Sa√∫de em Plataformas de Petr√≥leo - Avan√ßado' },
    { setor: 'TREINAMENTO', tipo: 'NR-37 - MOVIMENTA√á√ÉO DE CARGA', descricao: 'NR-37 - Movimenta√ß√£o de Carga' },
    { setor: 'TREINAMENTO', tipo: 'PE-1PBR-00223 ‚Äì MS MOVIMENTA√á√ÉO DE CARGAS (ANEXO J)', descricao: 'Procedimento de Movimenta√ß√£o de Cargas (Anexo J)' },
    { setor: 'TREINAMENTO', tipo: 'OPERA√á√ÉO COM PISTOLA HILTI', descricao: 'Treinamento de Opera√ß√£o com Pistola Hilti' },
    { setor: 'TREINAMENTO', tipo: 'OPERA√á√ÉO COM M√ÅQUINA DE TORQUE', descricao: 'Treinamento de Opera√ß√£o com M√°quina de Torque' },
    { setor: 'TREINAMENTO', tipo: 'LIDERAN√áA', descricao: 'Treinamento de Lideran√ßa' },
    { setor: 'TREINAMENTO', tipo: 'ACESSO POR CORDAS', descricao: 'Treinamento de Acesso por Cordas' },
    { setor: 'TREINAMENTO', tipo: 'Qualifica√ß√£o para Ajudantes', descricao: 'Qualifica√ß√£o para Ajudantes' },
    { setor: 'TREINAMENTO', tipo: 'Qualifica√ß√£o para Inspetores', descricao: 'Qualifica√ß√£o para Inspetores' },
    { setor: 'TREINAMENTO', tipo: 'Curso para Pintores emitido pelo CQ', descricao: 'Curso para Pintores emitido pelo Controle de Qualidade' },
    { setor: 'TREINAMENTO', tipo: 'FORMA√á√ÉO HIDROJATISTA', descricao: 'Forma√ß√£o de Hidrojatista' },
    { setor: 'TREINAMENTO', tipo: 'EMITENTE DE PT', descricao: 'Treinamento para Emitente de Permiss√£o de Trabalho' },
    { setor: 'TREINAMENTO', tipo: 'PERMISS√ÉO DE TRABALHO - PT', descricao: 'Treinamento de Permiss√£o de Trabalho' },
    { setor: 'TREINAMENTO', tipo: 'PROCEDIMENTOS GRANSERVICES', descricao: 'Treinamento de Procedimentos GranServices' },
    { setor: 'TREINAMENTO', tipo: 'PROCEDIMENTOS PETROBRAS', descricao: 'Treinamento de Procedimentos Petrobras' }
  ]

  console.log('\nCriando tarefas padr√£o...')
  let tarefasPadraoCriadas = 0
  for (const tarefa of tarefasPadrao) {
    const existing = await prisma.tarefaPadrao.findFirst({
      where: {
        setor: tarefa.setor,
        tipo: tarefa.tipo
      }
    })
    
    if (!existing) {
      await prisma.tarefaPadrao.create({
        data: tarefa
      })
      tarefasPadraoCriadas++
    }
  }
  console.log(`${tarefasPadraoCriadas} tarefas padr√£o criadas`)

  console.log('\nüéâ Seed conclu√≠do com sucesso!')
  console.log(`- ${centrosCustoCriados.length} centros de custo criados`)
  console.log(`- ${contratosCriados.length} contratos criados`)
  console.log(`- ${vinculacoes.length} vincula√ß√µes criadas`)
  console.log(`- ${equipesCriadas.length} equipes criadas`)
  console.log(`- ${tarefasPadraoCriadas} tarefas padr√£o criadas`)
  console.log('- 1 funcion√°rio administrador criado')
  console.log('- 1 usu√°rio administrador criado')
}

main()
  .catch((e) => {
    console.error('Erro durante o seed:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })