generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Contrato {
  id                    Int                        @id @default(autoincrement())
  numero                String                     @unique
  nome                  String
  cliente               String
  dataInicio            DateTime
  dataFim               DateTime
  status                String
  createdAt             DateTime                   @default(now())
  centrosCusto          ContratosCentrosCusto[]
  funcionarios          Funcionario[]
  remanejamentosDestino SolicitacaoRemanejamento[] @relation("ContratoDestino")
  remanejamentosOrigem  SolicitacaoRemanejamento[] @relation("ContratoOrigem")
}

model CentroCusto {
  id                Int                     @id @default(autoincrement())
  num_centro_custo  String                  @unique
  nome_centro_custo String
  status            String
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  contratos         ContratosCentrosCusto[]
}

model ContratosCentrosCusto {
  id            Int         @id @default(autoincrement())
  contratoId    Int
  centroCustoId Int
  createdAt     DateTime    @default(now())
  centroCusto   CentroCusto @relation(fields: [centroCustoId], references: [id], onDelete: Cascade)
  contrato      Contrato    @relation(fields: [contratoId], references: [id], onDelete: Cascade)

  @@unique([contratoId, centroCustoId])
}

model Funcionario {
  id                        Int                        @id @default(autoincrement())
  matricula                 String                     @unique
  cpf                       String?
  nome                      String
  funcao                    String?
  rg                        String?
  orgaoEmissor              String?
  uf                        String?
  dataNascimento            DateTime?
  email                     String?
  telefone                  String?
  centroCusto               String?
  departamento              String?
  status                    String?
  statusPrestserv           String?
  emMigracao                Boolean                    @default(false)
  contratoId                Int?
  criadoEm                  DateTime                   @default(now())
  atualizadoEm              DateTime                   @updatedAt
  excluidoEm                DateTime?
  sispat                    String?
  contrato                  Contrato?                  @relation(fields: [contratoId], references: [id])
  periodoUploads            PeriodoUpload[]
  remanejamentosFuncionario RemanejamentoFuncionario[]
  uptimeSheets              UptimeSheet[]
  uptimeUploads             UptimeUpload[]
  usuario                   Usuario?
}

model UptimeSheet {
  id               Int         @id @default(autoincrement())
  matricula        String
  dataAdmissao     DateTime?
  dataDemissao     DateTime?
  dataInicio       DateTime?
  dataFim          DateTime?
  totalDias        Int?
  totalDiasPeriodo Int?
  nome             String?
  funcao           String?
  status           String?
  embarcacao       String?
  observacoes      String?
  sispat           String?
  departamento     String?
  centroCusto      String?
  createdAt        DateTime    @default(now())
  periodoFinal     DateTime?
  periodoInicial   DateTime?
  funcionario      Funcionario @relation(fields: [matricula], references: [matricula], onDelete: NoAction)
}

model DowntimeSheet {
  id                 Int      @id @default(autoincrement())
  codProjeto         String?
  nomeProjeto        String?
  uptime             Float?
  downtime           Float?
  agEmbarque         Int?
  percentAgEmbarque  Float?
  cadastro           Int?
  percentCadastro    Float?
  medicina           Int?
  percentMedicina    Float?
  treinamento        Int?
  percentTreinamento Float?
  atestado           Int?
  percentAtestado    Float?
  falta              Int?
  percentFalta       Float?
  demissao           Int?
  percentDemissao    Float?
  dataUpload         DateTime @default(now())
  nomeArquivo        String?
  uploadPor          String?
  createdAt          DateTime @default(now())

  @@map("downtime_sheet")
}

model SolicitacaoRemanejamento {
  id                Int                        @id @default(autoincrement())
  tipo              String                     @default("REMANEJAMENTO")
  contratoOrigemId  Int?
  contratoDestinoId Int?
  justificativa     String?
  status            String                     @default("Pendente")
  prioridade        String                     @default("Normal")
  solicitadoPor     String
  analisadoPor      String?
  dataSolicitacao   DateTime                   @default(now())
  dataAnalise       DateTime?
  dataAprovacao     DateTime?
  dataConclusao     DateTime?
  observacoes       String?
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt
  historico         HistoricoRemanejamento[]
  funcionarios      RemanejamentoFuncionario[]
  contratoDestino   Contrato?                  @relation("ContratoDestino", fields: [contratoDestinoId], references: [id])
  contratoOrigem    Contrato?                  @relation("ContratoOrigem", fields: [contratoOrigemId], references: [id])

  @@index([status])
  @@index([dataSolicitacao])
}

model RemanejamentoFuncionario {
  id                   String                   @id @default(cuid())
  solicitacaoId        Int
  funcionarioId        Int
  statusTarefas        String                   @default("APROVAR SOLICITAÇÃO")
  statusPrestserv      String                   @default("PENDENTE")
  statusFuncionario    String                   @default("SEM_CADASTRO")
  dataRascunhoCriado   DateTime?
  dataSubmetido        DateTime?
  dataResposta         DateTime?
  observacoesPrestserv String?
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  historico            HistoricoRemanejamento[]
  solicitacao          SolicitacaoRemanejamento @relation(fields: [solicitacaoId], references: [id], onDelete: Cascade)
  funcionario          Funcionario              @relation(fields: [funcionarioId], references: [id])
  tarefas              TarefaRemanejamento[]

  @@unique([solicitacaoId, funcionarioId])
  @@index([statusTarefas])
  @@index([statusPrestserv])
}

model TarefaRemanejamento {
  id                         String                          @id @default(cuid())
  remanejamentoFuncionarioId String
  tipo                       String
  descricao                  String?
  responsavel                String
  status                     String                          @default("PENDENTE")
  prioridade                 String                          @default("Normal")
  dataCriacao                DateTime                        @default(now())
  dataLimite                 DateTime?
  dataConclusao              DateTime?
  observacoes                String?
  dataVencimento             DateTime?
  historico                  HistoricoRemanejamento[]
  observacoesTarefa          ObservacaoTarefaRemanejamento[]
  remanejamentoFuncionario   RemanejamentoFuncionario        @relation(fields: [remanejamentoFuncionarioId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([responsavel])
}

model ObservacaoTarefaRemanejamento {
  id              Int                 @id @default(autoincrement())
  tarefaId        String
  texto           String
  dataCriacao     DateTime            @default(now())
  dataModificacao DateTime            @updatedAt
  criadoPor       String
  modificadoPor   String
  tarefa          TarefaRemanejamento @relation(fields: [tarefaId], references: [id], onDelete: Cascade)
}

model HistoricoRemanejamento {
  id                         Int                       @id @default(autoincrement())
  remanejamentoFuncionarioId String?
  solicitacaoId              Int?
  tarefaId                   String?
  tipoAcao                   String
  entidade                   String
  campoAlterado              String?
  valorAnterior              String?
  valorNovo                  String?
  descricaoAcao              String
  usuarioResponsavel         String
  dataAcao                   DateTime                  @default(now())
  observacoes                String?
  tarefa                     TarefaRemanejamento?      @relation(fields: [tarefaId], references: [id], onDelete: Cascade)
  solicitacao                SolicitacaoRemanejamento? @relation(fields: [solicitacaoId], references: [id], onDelete: Cascade)
  remanejamentoFuncionario   RemanejamentoFuncionario? @relation(fields: [remanejamentoFuncionarioId], references: [id], onDelete: Cascade)

  @@index([dataAcao])
  @@index([tipoAcao])
  @@index([entidade])
  @@index([usuarioResponsavel])
  @@index([tarefaId])
}

model Equipe {
  id        Int       @id @default(autoincrement())
  nome      String    @unique
  descricao String?
  ativo     Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  usuarios  Usuario[]
}

model TarefaPadrao {
  id        Int      @id @default(autoincrement())
  setor     String
  tipo      String
  descricao String
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([setor])
  @@index([ativo])
}

model Usuario {
  id            Int         @id @default(autoincrement())
  funcionarioId Int         @unique
  senha         String
  equipeId      Int
  ativo         Boolean     @default(true)
  ultimoLogin   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  equipe        Equipe      @relation(fields: [equipeId], references: [id])
  funcionario   Funcionario @relation(fields: [funcionarioId], references: [id], onDelete: Cascade)

  @@index([funcionarioId])
  @@index([equipeId])
  @@index([ativo])
}

model UptimeUpload {
  id             Int          @id @default(autoincrement())
  dataUpload     DateTime     @default(now())
  nomeArquivo    String?
  registros      Int
  atualizados    Int
  naoEncontrados Int
  uploadPor      String
  funcionarioId  Int?
  createdAt      DateTime     @default(now())
  dataRelatorio  DateTime?
  funcionario    Funcionario? @relation(fields: [funcionarioId], references: [id])

  @@index([dataUpload])
  @@index([dataRelatorio])
}

model PeriodoSheet {
  id               Int       @id @default(autoincrement())
  matricula        String
  dataAdmissao     DateTime?
  dataDemissao     DateTime?
  dataInicio       DateTime?
  dataFim          DateTime?
  periodoInicial   DateTime?
  periodoFinal     DateTime?
  totalDias        Int?
  totalDiasPeriodo Int?
  nome             String?
  funcao           String?
  embarcacao       String?
  statusFolha      String?
  codigo           String?
  observacoes      String?
  embarcacaoAtual  String?
  sispat           String?
  departamento     String?
  regimeTrabalho   String?
  regimeTratado    String?
  statusId         Int?
  projetoId        Int?
  mesReferencia    Int
  anoReferencia    Int
  createdAt        DateTime  @default(now())
  projeto          Projeto?  @relation(fields: [projetoId], references: [id])
  status           Status?   @relation(fields: [statusId], references: [id])

  @@index([mesReferencia, anoReferencia])
  @@index([matricula])
  @@index([statusId])
  @@index([projetoId])
  @@index([regimeTratado])
}

model PeriodoUpload {
  id               Int          @id @default(autoincrement())
  dataUpload       DateTime     @default(now())
  dataRelatorio    DateTime?
  nomeArquivo      String?
  registros        Int
  atualizados      Int
  naoEncontrados   Int
  uploadPor        String
  funcionarioId    Int?
  mesReferencia    Int
  anoReferencia    Int
  periodoInicial   DateTime
  periodoFinal     DateTime
  totalDiasPeriodo Int
  createdAt        DateTime     @default(now())
  funcionario      Funcionario? @relation(fields: [funcionarioId], references: [id])

  @@index([dataUpload])
  @@index([dataRelatorio])
  @@index([mesReferencia, anoReferencia])
}

model Status {
  id             Int             @id @default(autoincrement())
  categoria      String          @unique
  ativo          Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  periodoSheets  PeriodoSheet[]
  statusMappings StatusMapping[]

  @@index([categoria])
  @@index([ativo])
}

model Projeto {
  id            Int                  @id @default(autoincrement())
  nome          String               @unique
  ativo         Boolean              @default(true)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  centrosCusto  CentroCustoProjeto[]
  periodoSheets PeriodoSheet[]

  @@index([nome])
  @@index([ativo])
}

model StatusMapping {
  id          Int      @id @default(autoincrement())
  statusGeral String   @unique
  statusId    Int
  ativo       Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      Status   @relation(fields: [statusId], references: [id])

  @@index([statusId])
  @@index([ativo])
}

model CentroCustoProjeto {
  id              Int      @id @default(autoincrement())
  centroCusto     String
  nomeCentroCusto String
  projetoId       Int
  ativo           Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  projeto         Projeto  @relation(fields: [projetoId], references: [id])

  @@unique([centroCusto, projetoId])
  @@index([centroCusto])
  @@index([projetoId])
  @@index([ativo])
}
