name: Deploy CrewFlow to Server

on:
  workflow_dispatch: # Executa apenas manualmente para evitar falhas em pushes

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔧 Build Docker image
      run: |
        docker build -t crewflow-app:${{ github.sha }} -t crewflow-app:latest .
        
    - name: 🔑 Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: 🧹 Prepare server disk before image load
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e
          echo "📊 Disk usage before prune:"
          df -h
          echo "🧮 Docker system df before prune:"
          docker system df || true
          echo "🧼 Cleaning /tmp to free ephemeral space"
          rm -rf /tmp/* || true
          echo "🧹 Pruning unused Docker data to free space"
          docker system prune -af || true
          echo "📊 Disk usage after prune:"
          df -h
          echo "🧮 Docker system df after prune:"
          docker system df || true
        EOF
        
    - name: 🚚 Stream Docker image to server
      run: |
        # Stream the docker image directly to the server to avoid storing large tar files remotely
        docker save crewflow-app:${{ github.sha }} crewflow-app:latest | gzip | ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_HOST }} "gunzip | docker load"
        
    - name: 📤 Upload files to server
      run: |
        # Create directory if it doesn't exist
        ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_HOST }} "mkdir -p /opt/projetogran"
        
        # Upload files
        scp -o StrictHostKeyChecking=no docker-compose.yml root@${{ secrets.SERVER_HOST }}:/opt/projetogran/
        
    - name: 🚀 Deploy on server
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_HOST }} << EOF
          set -e
          echo "📊 Disk usage before deploy:" 
          df -h
          echo "🧹 Pruning unused Docker data to free space"
          docker system prune -af || true
          cd /opt/projetogran
          
          # Image already loaded via stream, show info
          echo "🔎 Image details after load:"
          docker images | grep crewflow-app || true
          
          # Stop and remove old containers using docker directly
          docker stop $(docker ps -aq --filter "name=crewflow-app-production") 2>/dev/null || true
          docker rm $(docker ps -aq --filter "name=crewflow-app-production") 2>/dev/null || true
          # Preserve existing database and pgAdmin containers
          
          # Create network if it doesn't exist
          docker network create projetogran_crewflow-network 2>/dev/null || true
          
          # PostgreSQL already running (preserved), proceed to app start
          
          # Start the application
          APP_TAG=${{ github.sha }}
          if ! docker image inspect crewflow-app:${APP_TAG} > /dev/null 2>&1; then
            echo "⚠️ Image tag ${APP_TAG} not found, falling back to latest"
            APP_TAG=latest
          fi
          docker run -d \
            --name crewflow-app-production \
            --network projetogran_crewflow-network \
            -e DATABASE_URL="postgresql://crewflow_user:crewflow_production_2024@postgres-prod:5432/crewflow_production?schema=public" \
            -e JWT_SECRET=crewflow-jwt-secret-key-2024 \
            -e NEXTAUTH_URL=http://${{ secrets.SERVER_HOST }}:3001 \
            -e NODE_ENV=production \
            -p 3001:3001 \
            --restart unless-stopped \
            crewflow-app:${APP_TAG}
          
          # pgAdmin preserved
          
          # No remote tar to clean up when streaming
          echo "📊 Disk usage after image load:" 
          df -h
          
          # Wait for services to start
          sleep 10
          
          # Check if app container is running
          if docker ps | grep -q "crewflow-app-production"; then
            echo "✅ App container started successfully"
            docker ps | grep "crewflow-app-production"
            echo "🔎 Image details:"
            docker images | grep crewflow-app
            docker inspect crewflow-app-production --format 'container image: {{.Image}}'
          else
            echo "❌ App container failed to start"
            docker ps
            docker logs crewflow-app-production 2>/dev/null || true
            exit 1
          fi
        EOF
        
    - name: 🗄️ Setup Database
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_HOST }} << 'EOF'
          cd /opt/projetogran
          
          # Wait for PostgreSQL to be ready
          echo "⏳ Waiting for PostgreSQL to be ready..."
          sleep 10
          
          # Generate Prisma client and run migrations
          docker exec crewflow-app-production npx prisma generate
          docker exec crewflow-app-production npx prisma migrate deploy
          
          # Run seed if database is empty
          if docker exec crewflow-app-production npx prisma db seed 2>/dev/null; then
            echo "✅ Database seeded successfully"
          else
            echo "ℹ️ Seed skipped (database already populated or error occurred)"
          fi
        EOF

    - name: 🔎 Health check: logout endpoint
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e
          echo "🔎 Testing logout endpoint..."
          if command -v curl >/dev/null 2>&1; then
            RES=$(curl -i -s -X POST http://localhost:3001/api/auth/logout -H "Content-Type: application/json" -d "{}")
            echo "$RES"
            echo "$RES" | grep -q "HTTP/1.1 200" || (echo "❌ Logout not returning 200" && exit 1)
            echo "$RES" | grep -i "set-cookie: auth-token" >/dev/null || (echo "❌ Set-Cookie auth-token not found" && exit 1)
            echo "✅ Logout endpoint OK"
          else
            RES=$(wget -S -q -O - --header="Content-Type: application/json" --post-data="{}" http://localhost:3001/api/auth/logout 2>&1 || true)
            echo "$RES"
            echo "$RES" | grep -q "HTTP/1.1 200" || (echo "❌ Logout not returning 200" && exit 1)
            echo "$RES" | grep -i "set-cookie: auth-token" >/dev/null || (echo "❌ Set-Cookie auth-token not found" && exit 1)
            echo "✅ Logout endpoint OK"
          fi
        EOF
        
    - name: 🎉 Deployment complete
      run: |
        echo "🚀 Deployment completed successfully!"
        echo "🌐 Application available at: http://${{ secrets.SERVER_HOST }}:3001"
        echo "🗄️ PostgreSQL running on port 5434 with persistent volume"
        echo "🔧 pgAdmin4 available at: http://${{ secrets.SERVER_HOST }}:5050"
        echo "📧 pgAdmin Login: admin@crewflow.com / admin123"
        echo "🔐 App Login: ADMIN001 / admin123"