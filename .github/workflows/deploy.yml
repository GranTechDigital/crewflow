name: Deploy to Production Server

on:
  push:
    branches: [ main, master ]
  workflow_dispatch: # Permite execução manual

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔧 Build Docker image
      run: |
        docker build -t projetogran-app:latest .
        
    - name: 💾 Save Docker image
      run: |
        docker save projetogran-app:latest > projetogran-app.tar
        
    - name: 🔑 Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        
    - name: 📤 Upload files to server
      run: |
        # Create directory if it doesn't exist
        ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_HOST }} "mkdir -p /opt/projetogran"
        
        # Upload files
        scp -o StrictHostKeyChecking=no projetogran-app.tar root@${{ secrets.SERVER_HOST }}:/tmp/
        scp -o StrictHostKeyChecking=no docker-compose.yml root@${{ secrets.SERVER_HOST }}:/opt/projetogran/
        
    - name: 🚀 Deploy on server
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_HOST }} << 'EOF'
          cd /opt/projetogran
          
          # Load new image
          docker load < /tmp/projetogran-app.tar
          
          # Stop and remove old containers
          docker compose down 2>/dev/null || docker-compose down 2>/dev/null || true
          docker stop projetogran-app-fixed-final 2>/dev/null || true
          docker rm projetogran-app-fixed-final 2>/dev/null || true
          
          # Start services with docker compose (new version)
          docker compose up -d || docker-compose up -d
          
          # Clean up
          rm /tmp/projetogran-app.tar
          
          # Wait for services to start
          sleep 15
          
          # Check if containers are running
          if docker compose ps 2>/dev/null | grep -q "Up" || docker-compose ps 2>/dev/null | grep -q "Up"; then
            echo "✅ Services started successfully"
            docker compose ps 2>/dev/null || docker-compose ps 2>/dev/null
          else
            echo "❌ Services failed to start"
            docker compose logs 2>/dev/null || docker-compose logs 2>/dev/null
            exit 1
          fi
        EOF
        
    - name: 🗄️ Setup Database
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_HOST }} << 'EOF'
          cd /opt/projetogran
          
          # Wait for PostgreSQL to be ready
          echo "⏳ Waiting for PostgreSQL to be ready..."
          sleep 10
          
          # Generate Prisma client and run migrations
          docker compose exec -T app npx prisma generate 2>/dev/null || docker-compose exec -T app npx prisma generate
          docker compose exec -T app npx prisma migrate deploy 2>/dev/null || docker-compose exec -T app npx prisma migrate deploy
          
          # Run seed if database is empty
          if docker compose exec -T app npx prisma db seed 2>/dev/null || docker-compose exec -T app npx prisma db seed 2>/dev/null; then
            echo "✅ Database seeded successfully"
          else
            echo "ℹ️ Seed skipped (database already populated or error occurred)"
          fi
        EOF
        
    - name: 🎉 Deployment complete
      run: |
        echo "🚀 Deployment completed successfully!"
        echo "🌐 Application available at: http://${{ secrets.SERVER_HOST }}:3001"
        echo "🗄️ PostgreSQL running on port 5434 with persistent volume"
        echo "🔧 pgAdmin4 available at: http://${{ secrets.SERVER_HOST }}:5050"
        echo "📧 pgAdmin Login: admin@crewflow.com / admin123"
        echo "🔐 App Login: ADMIN001 / admin123"