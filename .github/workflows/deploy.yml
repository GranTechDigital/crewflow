name: Deploy to Production Server

on:
  workflow_dispatch: # Executa apenas manualmente para evitar falhas em pushes

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔧 Build Docker image (cache enabled)
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: |
            crewflow-app:${{ github.sha }}
            crewflow-app:latest
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔑 Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: 🧹 Prepare server before image load (no prune)
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_HOST }} << 'EOF'
            set -e
            echo "📊 Disk usage before image load:"
            df -h
            echo "🧮 Docker system df (before):"
            docker system df || true
            echo "🧼 Cleaning /tmp to free ephemeral space"
            rm -rf /tmp/* || true
            echo "ℹ️ Skipping Docker prune (enough disk space)"
            echo "📊 Disk usage after cleanup (no prune):"
            df -h
            echo "🧮 Docker system df (after):"
            docker system df || true
          EOF

      - name: 🚚 Stream Docker image to server
        run: |
          docker save crewflow-app:${{ github.sha }} crewflow-app:latest | gzip -1 | ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_HOST }} "gunzip | docker load"

      - name: 📤 Upload files to server
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_HOST }} "mkdir -p /opt/projetogran"
          scp -o StrictHostKeyChecking=no docker-compose.yml root@${{ secrets.SERVER_HOST }}:/opt/projetogran/

      - name: 🔍 Detect prisma changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            prisma:
              - 'prisma/**'

      - name: 🚀 Deploy on server
        run: |
          # Use quoted heredoc to prevent local shell from expanding remote variables like $APP_TAG
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_HOST }} << 'EOF'
            set -e
            echo "📊 Disk usage before deploy:" 
            df -h
            cd /opt/projetogran

            echo "🔎 Image details after load:"
            docker images | grep crewflow-app || true

            # Ensure the loaded image has predictable tags (latest and current SHA)
            SRC_TAG=$(docker image ls crewflow-app --format '{{.Tag}}' | grep -v '^<none>$' | head -n1)
            if [ -n "$SRC_TAG" ]; then
              docker tag crewflow-app:"$SRC_TAG" crewflow-app:latest || true
              docker tag crewflow-app:"$SRC_TAG" crewflow-app:${{ github.sha }} || true
            fi

            # Ensure network exists
            docker network create projetogran_crewflow-network 2>/dev/null || true

            # Stop and remove existing production container safely (avoid empty args)
            CID=$(docker ps -aq --filter "name=crewflow-app-production" | tr -d '\r' | tr -d '[:space:]')
            if [ -n "$CID" ]; then
              echo "🛑 Stopping existing container crewflow-app-production ($CID)"
              docker stop "$CID" || true
              docker rm "$CID" || true
            fi

            # Free port 3001 if occupied by any container
            BUSY_CIDS=$(docker ps --format '{{.ID}} {{.Ports}}' | awk '/0.0.0.0:3001->/ {print $1}')
            if [ -n "$BUSY_CIDS" ]; then
              echo "⚠️ Port 3001 in use; stopping containers: $BUSY_CIDS"
              docker stop $BUSY_CIDS || true
            fi

            # Bring up production stack via compose (app, postgres and pgadmin)
            docker compose -f docker-compose.yml up -d

            echo "📊 Disk usage after image load:" 
            df -h

            sleep 5

            if docker ps | grep -q "crewflow-app-production"; then
              echo "✅ App container started successfully"
              docker ps | grep "crewflow-app-production"
              echo "🔎 Image details:"
              docker images | grep crewflow-app
              docker inspect crewflow-app-production --format 'container image: {{.Image}}' || true
            else
              echo "❌ App container failed to start"
              docker ps
              docker logs crewflow-app-production 2>/dev/null || true
              exit 1
            fi
          EOF

      - name: 🗄️ Setup Database (only on prisma changes)
        if: steps.changes.outputs.prisma == 'true'
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_HOST }} << 'EOF'
            cd /opt/projetogran

            echo "⏳ Waiting for PostgreSQL to be ready..."
            sleep 10

            docker exec crewflow-app-production npx prisma migrate deploy

            if docker exec crewflow-app-production npx prisma db seed 2>/dev/null; then
              echo "✅ Database seeded successfully"
            else
              echo "ℹ️ Seed skipped (database already populated or error occurred)"
            fi
          EOF

      - name: "🔎 Health check: app responds (login route)"
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_HOST }} << 'EOF'
            set -e
            echo "🔎 Checking /login endpoint..."
            if command -v curl >/dev/null 2>&1; then
              STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3001/login)
              echo "HTTP status: $STATUS"
              case "$STATUS" in
                200|302|307|308)
                  echo "✅ App responding on /login"
                  ;;
                *)
                  echo "❌ Unexpected status on /login: $STATUS"
                  exit 1
                  ;;
              esac
            else
              STATUS=$(wget --server-response -q -O - http://localhost:3001/login 2>&1 | awk '/^  HTTP/{print $2}' | tail -n1)
              echo "HTTP status: $STATUS"
              if [ "$STATUS" = "200" ] || [ "$STATUS" = "302" ] || [ "$STATUS" = "307" ] || [ "$STATUS" = "308" ]; then
                echo "✅ App responding on /login"
              else
                echo "❌ Unexpected status on /login: $STATUS"
                exit 1
              fi
            fi
          EOF

      - name: 🎉 Deployment complete
        run: |
          echo "🚀 Deployment completed successfully!"
          echo "🌐 Application available at: http://${{ secrets.SERVER_HOST }}:3001"
          echo "🗄️ PostgreSQL running on port 5434 with persistent volume"
          echo "🔧 pgAdmin4 available at: http://${{ secrets.SERVER_HOST }}:5050"
          echo "📧 pgAdmin Login: admin@crewflow.com / admin123"
          echo "🔐 App Login: ADMIN001 / admin123"
