name: Deploy CrewFlow to Staging

on:
  workflow_dispatch: {}
  push:
    branches: [ develop, staging ]
  pull_request:
    branches: [ main ]

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔧 Build Docker image (cache enabled)
      uses: docker/build-push-action@v5
      with:
        context: .
        tags: |
          crewflow-app:staging
          crewflow-app:staging-${{ github.sha }}
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🔑 Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        
    - name: 🧹 Prepare server before image load (no prune)
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e
          echo "📊 Disk usage before image load:"
          df -h
          echo "🧮 Docker system df (before):"
          docker system df || true
          echo "🧼 Cleaning /tmp to free ephemeral space"
          rm -rf /tmp/* || true
          echo "ℹ️ Skipping Docker prune (enough disk space)"
          echo "📊 Disk usage after cleanup (no prune):"
          df -h
          echo "🧮 Docker system df (after):"
          docker system df || true
        EOF
        
    - name: 🚚 Stream Docker image to server
      run: |
        docker save crewflow-app:staging crewflow-app:staging-${{ github.sha }} | gzip -1 | ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_HOST }} "gunzip | docker load"

    - name: 📤 Upload files to server
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_HOST }} "mkdir -p /opt/projetogran"
        scp -o StrictHostKeyChecking=no docker-compose.staging.yml root@${{ secrets.SERVER_HOST }}:/opt/projetogran/

    - name: 🔍 Detect prisma changes
      id: changes
      uses: dorny/paths-filter@v3
      with:
        filters: |
          prisma:
            - 'prisma/**'
        
    - name: 🚀 Deploy to staging
      run: |
        # Use quoted heredoc to avoid local variable expansion
        ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e
          echo "📊 Disk usage before deploy:"
          df -h
          cd /opt/projetogran

          echo "🔎 Image details after load:"
          docker images | grep crewflow-app || true

          # Ensure predictable tags (staging and staging-SHA)
          SRC_TAG=$(docker image ls crewflow-app --format '{{.Tag}}' | grep -E '^staging(-[0-9a-f]+)?$' | head -n1)
          if [ -n "$SRC_TAG" ]; then
            docker tag crewflow-app:"$SRC_TAG" crewflow-app:staging || true
            docker tag crewflow-app:"$SRC_TAG" crewflow-app:staging-${{ github.sha }} || true
          fi

          # Ensure network exists
          docker network create projetogran_crewflow-network 2>/dev/null || true

          # Stop and remove existing staging container safely
          CID=$(docker ps -aq --filter "name=crewflow-app-staging" | tr -d '\r' | tr -d '[:space:]')
          if [ -n "$CID" ]; then
            echo "🛑 Stopping existing container crewflow-app-staging ($CID)"
            docker stop "$CID" || true
            docker rm "$CID" || true
          fi

          # Free port 3002 if occupied by any container
          BUSY_CIDS=$(docker ps --format '{{.ID}} {{.Ports}}' | awk '/0.0.0.0:3002->/ {print $1}')
          if [ -n "$BUSY_CIDS" ]; then
            echo "⚠️ Port 3002 in use; stopping containers: $BUSY_CIDS"
            docker stop $BUSY_CIDS || true
          fi

          # Prefer Compose v2 plugin; if unavailable, use containerized Compose v1 (avoids Python ssl_version mismatch)
          if docker compose version >/dev/null 2>&1; then
            COMPOSE_CMD="docker compose"
            # Bring up staging stack via compose v2
            $COMPOSE_CMD -f docker-compose.staging.yml up -d
          else
            echo "ℹ️ Using containerized docker-compose (v1.29.2) fallback"
            COMPOSE_RUN="docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v /opt/projetogran:/workdir -w /workdir docker/compose:1.29.2"
            # Bring up staging stack via containerized compose v1
            $COMPOSE_RUN -f docker-compose.staging.yml up -d
          fi

          echo "📊 Disk usage after compose up:"
          df -h

          sleep 5

          if docker ps | grep -q "crewflow-app-staging"; then
            echo "✅ Staging app container started successfully"
            docker ps | grep "crewflow-app-staging"
          else
            echo "❌ Staging app container failed to start"
            docker ps
            docker logs crewflow-app-staging 2>/dev/null || true
            exit 1
          fi
        EOF
        
    - name: 🗄️ Setup Database (migrate + seed)
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_HOST }} << 'EOF'
          cd /opt/projetogran

          echo "⏳ Waiting for PostgreSQL (staging) to be ready..."
          sleep 10

          docker exec crewflow-app-staging npx prisma migrate deploy

          if docker exec crewflow-app-staging npx prisma db seed 2>/dev/null; then
            echo "✅ Staging database seeded successfully"
          else
            echo "ℹ️ Seed skipped (database already populated or error occurred)"
          fi
        EOF

    - name: 🔐 Ensure Admin Credentials (ADMIN001 / admin123)
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_HOST }} << 'EOF'
          cd /opt/projetogran
          echo "🔐 Ensuring admin user credentials..."
          # Run admin creation/update script inside the app container
          if docker ps | grep -q "crewflow-app-staging"; then
            docker exec crewflow-app-staging node /app/create-admin-user.js || true
          else
            echo "❌ Staging app container not running; cannot ensure admin user"
          fi
        EOF

    - name: 📋 Prisma Status + List Tables
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e
          cd /opt/projetogran

          echo "🔎 Prisma migrate status (staging):"
          docker exec crewflow-app-staging npx prisma migrate status || true

          echo "📚 Public tables in crewflow_staging:"
          docker exec postgres-staging psql -U crewflow_user -d crewflow_staging -c "SELECT table_name FROM information_schema.tables WHERE table_schema='public' ORDER BY table_name;" || true
        EOF

    - name: "🔎 Health check: staging app responds (login route)"
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e
          echo "🔎 Checking /login endpoint on staging..."
          if command -v curl >/dev/null 2>&1; then
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3002/login)
            echo "HTTP status: $STATUS"
            case "$STATUS" in
              200|302|307|308)
                echo "✅ Staging app responding on /login"
                ;;
              *)
                echo "❌ Unexpected status on /login: $STATUS"
                exit 1
                ;;
            esac
          else
            STATUS=$(wget --server-response -q -O - http://localhost:3002/login 2>&1 | awk '/^  HTTP/{print $2}' | tail -n1)
            echo "HTTP status: $STATUS"
            if [ "$STATUS" = "200" ] || [ "$STATUS" = "302" ] || [ "$STATUS" = "307" ] || [ "$STATUS" = "308" ]; then
              echo "✅ Staging app responding on /login"
            else
              echo "❌ Unexpected status on /login: $STATUS"
              exit 1
            fi
          fi
        EOF
        
    - name: 📝 Comment PR (if PR)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚀 **CrewFlow Staging Deploy Successful!**
            
            📍 **Staging URL:** http://${{ secrets.SERVER_HOST }}:3002
            🔐 **Login:** ADMIN001 / admin123
            
            ✅ Ready for testing!`
          })
        
    - name: 🎉 Staging deployment complete
      run: |
        echo "🚀 CrewFlow staging deployment completed successfully!"
        echo "🌐 Staging available at: http://${{ secrets.SERVER_HOST }}:3002"
        echo "🔐 Login: ADMIN001 / admin123"