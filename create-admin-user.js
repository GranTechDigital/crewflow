import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function createAdminUser() {
  try {
    console.log('üîß Criando usu√°rio administrador...');

    // Primeiro, verificar se j√° existe
    const existingFuncionario = await prisma.funcionario.findUnique({
      where: { matricula: "ADMIN001" },
      include: { usuario: true }
    });

    if (existingFuncionario) {
      console.log('‚úÖ Funcion√°rio ADMIN001 j√° existe');
      
      if (existingFuncionario.usuario) {
        console.log('‚úÖ Usu√°rio j√° existe');
        
        // Atualizar senha para garantir que est√° correta
        const hashedPassword = await bcrypt.hash("admin123", 10);
        await prisma.usuario.update({
          where: { funcionarioId: existingFuncionario.id },
          data: {
            senha: hashedPassword,
            ativo: true
          }
        });
        console.log('‚úÖ Senha atualizada para: admin123');
      } else {
        // Criar usu√°rio se n√£o existir
        const hashedPassword = await bcrypt.hash("admin123", 10);
        await prisma.usuario.create({
          data: {
            senha: hashedPassword,
            ativo: true,
            funcionarioId: existingFuncionario.id,
            equipeId: 1 // Assumindo que existe uma equipe com ID 1
          }
        });
        console.log('‚úÖ Usu√°rio criado para funcion√°rio existente');
      }
    } else {
      // Criar funcion√°rio e usu√°rio
      const adminFuncionario = await prisma.funcionario.create({
        data: {
          nome: "Administrador do Sistema",
          cpf: "00000000000",
          email: "admin@gransystem.com",
          telefone: "(11) 99999-9999",
          matricula: "ADMIN001",
          funcao: "Administrador",
          departamento: "TI",
          centroCusto: "ADMIN",
          status: "ATIVO"
        }
      });

      const hashedPassword = await bcrypt.hash("admin123", 10);
      await prisma.usuario.create({
        data: {
          senha: hashedPassword,
          ativo: true,
          funcionarioId: adminFuncionario.id,
          equipeId: 1
        }
      });
      
      console.log('‚úÖ Funcion√°rio e usu√°rio criados');
    }

    // Verificar se foi criado corretamente
    const verificacao = await prisma.funcionario.findUnique({
      where: { matricula: "ADMIN001" },
      include: { usuario: true }
    });

    console.log('\n=== VERIFICA√á√ÉO ===');
    console.log('Matr√≠cula:', verificacao?.matricula);
    console.log('Nome:', verificacao?.nome);
    console.log('Email:', verificacao?.email);
    console.log('Usu√°rio ativo:', verificacao?.usuario?.ativo);
    
    // Testar senha
    if (verificacao?.usuario?.senha) {
      const senhaCorreta = await bcrypt.compare("admin123", verificacao.usuario.senha);
      console.log('Senha "admin123" v√°lida:', senhaCorreta);
    }

    console.log('\nüéâ Usu√°rio administrador configurado com sucesso!');
    console.log('üìã CREDENCIAIS:');
    console.log('   Matr√≠cula: ADMIN001');
    console.log('   Senha: admin123');

  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createAdminUser();